#include "cs163_list.h"
using namespace std;

//Sum  all of the data together in a LLL
int list::sum_total()
{
 	//FIRST do this iteratively here. Then recursively
        //COMMENT out the iterative version when  rewriting
        //the solution recursively

        //To solve this recursively write another
        //function:   int sum_total(node * head);
        //and call it from this function
  /*
  int count = 0;
  do {
	count = count + head -> data;
	head = head -> next;
  } while (head -> next != NULL);
  return count + head -> data;
  */
  return list::sum_total(head);
}

//Now implement the function recursively!
int list::sum_total(node * head)
{
  int count = 0;
  if (!head) return 0;
  if (head -> next)
	count += list::sum_total(head -> next);
  return count + head -> data;

}

// *************************************************
//Remove the last node in a LLL. Return false if the
//list is empty and nothing is removed
bool list::remove_last()
{
        //Write your code here
 	//FIRST do this iteratively here. Then recursively
  //COMMENT out the iterative version when  rewriting
  /*
  node * temp = head;
  if (!head) return false;
  while (temp -> next != tail) temp = temp -> next;
  temp -> next = NULL;
  tail = temp;
  return true;
  */
  return remove_last(head, tail);
}

//Now implement the function recursively!
bool list::remove_last(node * & head, node * & tail)
{
  if (!head) return false;
  if (head -> next != tail) return remove_last(head -> next, tail);
  head -> next = NULL;
  tail = head;
  return true;
}

// ************************************************
//Remove all nodes in a LLL. Remove false if there is
//nothing to remove
bool list::remove_all()
{
        //Remove all nodes in a LLL
 	//FIRST do this iteratively here. Then recursively
  //COMMENT out the iterative version when  rewriting
  /*
  if (!head) return false;
  do {
	node * temp = head;
	head = head -> next;
	delete temp;
	temp = nullptr;
  } while (head != tail);
  head = nullptr;
  return true;
  */
  if (!head) return false;
  return remove_all(head);
}

//Now implement the function recursively!
bool list::remove_all(node * & head)
{
  node * temp = head;
  delete head;
  head = nullptr;
  return remove_all(head);
}
//return true if the requested item (sent in as an argument)
//is in the list, otherwise return false
bool list::find_item(int item_to_find)
{
        //Write your code here
  return false;
}

//Now implement the function recursively!
bool list::find_item(node * head, int item_to_find)
{

  return false;
}


// ************************************************
//Make a complete copy of a LLL
bool list::copy(list & from)
{
        //Write your code here
  return false;
}

//Now implement the function recursively
bool list::copy(node * & dest_head, node * & dest_tail, node * source)
{
  return false;

}
